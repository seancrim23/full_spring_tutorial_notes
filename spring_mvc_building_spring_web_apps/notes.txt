************************************************************************
spring mvc - building web apps
*******************************************************************************

- what is spring mvc?
	- framework for building web apps in Java
	- based on MVC design pattern
	- leverages IoC and DI
	
- benefits
	- Spring way of building web UIs in java
	- leverage a set of reusable UI components
	- manage app state
	- process form data
	- flexible config for view
	
- Components of SPring MVC App
	- set of web pages to layout UI components
	- collection of spring beans (controllers, services, etc)
	- Spring config (XML, annotations or java)
	
- Spring MVC Front Controller
	- known as DispatcherServlet
		- part of Spring framework
		
- MVC - Model View Controller
	- Controller	
		- created by dev
		- contains business logic
			- handle request
			- store/retrieve data
			- place data in model
		- send to appropriate view template
	- Model
		- contains your data
		- store / retrieve data via backend systems
			- db, web service, etc
			- use spring bean if youd like
		- place your data in the model
			- can be any Java object/collection
	- View
		-spring MVC is flexible
			- supports many view templates
		- most common = JSP + JSTL
		- Dev creates a page
			- displays data
			
- Spring MVC Config
	- Part 1
		- add configs to file: WEB-INF/web.xml
			- configure Spring MVC Dispatcher Servlet
				- <servlet>
					<servlet-name>dispatcher</servlet-name>
					<servlet-class>org.sprinframework.web.servlet.DispatcherServlet</servlet-class>
					
					<init-param>
						<param-name>contextConfigLocation</param-name>
						<param-value>/WEB-INF/spring-mvc-demo-servlet.xml</param-value>
					</init-param>
					
			- Set up URL mappings to Spring MVC Dispatcher Servlet
				- <servlet-mapping>
					<servlet-name>dispatcher</servlet-name> //THIS VALUE SHOULD MATCH THE VALUE WE SET UP IN STEP ONE
					<url-pattern>/</url-pattern>
				  </servlet-mapping>
			
	- Part 2
		- add configs to file: WEB-INF/spring-mvc-demo-servlet.xml
			- add support for spring component scanning
				- <context:component-scan base-package="com.luv2code.springdemo" />
			- add support for conversion, formatting and validation
				- <mvc:annotation-driven />
			- configure spring mvc view resolver
				- <bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/WEB-INF/view/" />
					<property name="suffix" value=".jsp" />
				  </bean>
				  - when your app provides a "view" name, Spring MVC automatically prepends the prefix and appends the suffix "/WEB-INF/view/viewName.jsp"
		
